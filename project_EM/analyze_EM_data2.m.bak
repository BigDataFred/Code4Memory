%function analyze_EM_data2(pID,expMode)

%% set data labels
%if nargin ==0
    pID = 'P02';
    expMode = 'fVSpEM';
%end;

%% set Matlab path environment
addpath('/home/rouxf/tbx/releaseDec2015/');
addpath(genpath('/home/rouxf/tbx/osort-v3-rel/'));
addpath(genpath('/home/rouxf/tbx/wave_clus/'));
addpath(genpath('/home/rouxf/tbx/chronux_2_11/'));
addpath('/home/rouxf/tbx/fieldtrip-20170618/');
ft_defaults;

addpath('/home/rouxf/prj/Bham/code/mcode/params/');
addpath('/home/rouxf/prj/Bham/code/mcode/helper/');
addpath('/home/rouxf/prj/Bham/code/mcode/helper/logfile_readers/');
addpath('/home/rouxf/prj/Bham/code/mcode/utils/spikes/');
addpath('/home/rouxf/prj/Bham/code/mcode/utils/LFP/');
addpath('/home/rouxf/prj/Bham/code/mcode/utils/TTL/');
addpath('/home/rouxf/prj/Bham/code/mcode/project_EM/');

%% recruit workers
% Create a parallel pool if none exists
mode = '';
if strcmp(mode,'')
    if isempty(gcp('nocreate'))
        parpool(36,'SpmdEnabled',false);
    end
end;

%% set data parameters
Fs =32e3;
timeStampsPerSec = (1/Fs)*1e6;

[par] = set_parameters_Bham(Fs);
[ bpfFilt ] = fir1(3*fix(Fs/par.sort_fmin),[par.sort_fmin par.sort_fmax]./(Fs/2),'bandpass');

%% parameters to read the TTL data
FieldSelection1 = [];
FieldSelection1(1) = 1;%timestamps
FieldSelection1(2) = 0;% EventIDs
FieldSelection1(3) = 1;%TTLs
FieldSelection1(4) = 0;% Extras
FieldSelection1(5) = 0;% Event strings

%% search for existing data
if strcmp(mode,'')
    %[rpath] = ['/media/rouxf/rds-share/Archive/MICRO/',pID,'/',expMode,'/'];
    [rpath] = '/home/rouxf/in/fVSpEM/';
else
    [rpath] = ['/media/rouxf/rds-share/Archive/MICRO/',pID,'/',expMode,'/'];
    %[rpath]    = ['/home/rouxf/in/',expMode,'/'];
end;
rpath

[savepath] = ['/home/rouxf/out/',expMode,'/'];
savepath

chck = dir(savepath);
if isempty(chck)
    mkdir(savepath);    
end;

sesh = dir(rpath);
sesh(1:2) = [];

[chck] = regexp({sesh(:).name},'\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}');

sel = [];
for it = 1:length(chck)
    if ~isempty(chck{it})
        sel = [sel it];
    end;
end;
sesh = sesh(sel);
clear sel chck;

dum = cell(length(sesh),1);
for it = 1:length(sesh);
    dum(it) = {[sesh(it).name]};
end;
sesh = dum
clear dum;

%% loop over recording sessions
for seshSel = 1:length(sesh)
    
    [p2d] = [rpath,sesh{seshSel},'/']
    [CSCfiles] = dir([p2d,'*.ncs']);
    
    %% read the Logfile
    [logDat]= getLogFileDataEMtask(pID,p2d,sesh,seshSel);    
       
    %% save the Logfile
    logFileName = [ pID ,'_', sesh{seshSel}, '_LogFile_EMtask_LogDat.mat' ];       
    save( [ savepath,logFileName ] , 'logDat' ); 
    
    %% load the logfile data        
    [blockSz] = diff(logDat.LogDat1.idx,[],2)+1;
    
    ix = 1:blockSz(1);
    dum = {};
    for it = 1:length(blockSz)
        dum{it} = [ix ix+length(ix)];
        if it < length(blockSz)
            ix = [dum{it}(end)+1:dum{it}(end)+blockSz(it+1)];
        end;
    end; 
    
    trlENC = {};
    trlRET = {};
    for it = 1:length(dum)
        trlENC{it} = dum{it}(1:blockSz(it));
        trlRET{it} = dum{it}(blockSz(it)+1:2*blockSz(it));
    end;
    [trlENC] = [trlENC{:}];
    [trlRET] = [trlRET{:}];
    
    if ( length(trlENC) ~= length(logDat.RTs) ) || ( length(trlRET) ~= length(logDat.RTs) )
        error('trial assignment must be equal');
    end;
    if ( length(trlENC) ~= length(trlRET) )
        error('trial assignment must be equal');
    end;
    
    %% read the TTL event data
    [EVfile] = dir([p2d,'*.nev']);
    
    [TimeStampsTTL, ttls,~] = Nlx2MatEV_v3( [p2d,EVfile.name], FieldSelection1, 1, 1, [] );
    
    [events] = zeros(size(ttls,2),2);
    events(:,1) = TimeStampsTTL';
    events(:,2) = ttls';
    firstTstamp = events(1,1);
    
    events(:,1) = (events(:,1)-firstTstamp)./1e6;
    
    TTLix = (TimeStampsTTL-firstTstamp)/timeStampsPerSec+1;
    TTLix = double(uint64(TTLix));
    
    [selIx7] = find(ttls ==7);
    
    [selIx7E] = selIx7(trlENC);
    [selIx7R] = selIx7(trlRET);
    
    [selIx255] = find(ttls==255);
    
    eventsE = events(selIx7E,:);
    eventsR = events(selIx7R,:);
    
    [selIx0E] = findTTLoffsetIdx(ttls,selIx7E,[1 2]);
    [selIx0R] = findTTLoffsetIdx(ttls,selIx7R,[1 2]);
    [selIx0II] = findTTLoffsetIdx(ttls,selIx255,[3 2]);   
    
    %%
    sortedSpikes = cell(1,length(CSCfiles));
    wltCoeffs = cell(1,length(CSCfiles));
    chanLab = cell(1,length(CSCfiles));
    LFPsig = cell(1,length(CSCfiles));
    LFPsig2 = cell(1,length(CSCfiles));
    
    %%
    tic;
    %for it =1:length(CSCfiles)
    parfor it = 1:length(CSCfiles)
    %for it = 17%[6:7]%2%1:length(CSCfiles)
        
        fprintf([num2str(it),'/',num2str(length( CSCfiles) )]);
        
        %%
        dum = CSCfiles(it).name;
        dum(regexp(dum,'_')) = [];
        dum(regexp(dum,'CSC'):regexp(dum,'CSC')+2) = [];
        dum(regexp(dum,'.ncs'):end) = [];
        chanLab{it} = dum;
        
        %% parameters to read the CSC data
        FieldSelection2 = [];
        FieldSelection2(1) = 1;%timestamps
        FieldSelection2(2) = 0;
        FieldSelection2(3) = 0;%sample freq
        FieldSelection2(4) = 0;
        FieldSelection2(5) = 1;%samples
        
        %%
        [~, dataSamples,hdr] = Nlx2MatCSC_v3([p2d,CSCfiles(it).name], FieldSelection2, 1, 1, []);
        
        chck = regexp(hdr,'ADBitVolts');
        selIdx = [];
        for jt = 1:length(chck);selIdx(jt) = ~isempty(chck{jt});end;
        selIdx = find(selIdx~=0);
        scalef = str2double(hdr{selIdx}(min(regexp(hdr{selIdx},'\d')):end));
        
        chck = regexp(hdr,'SamplingFrequency');
        selIdx = [];
        for jt = 1:length(chck);selIdx(jt) = ~isempty(chck{jt});end;
        selIdx = find(selIdx~=0);
        Fs = str2double(hdr{selIdx}(min(regexp(hdr{selIdx},'\d')):end));
        
        %% flatten
        [dataSamples] = double(dataSamples(:))';
        [dataSamples] = dataSamples.*scalef.*1e6;
        
        %% remove TTL artefact
        ntrl = [1 2 4 8];
        tw = [1 2 3 4 5];
        
        [ix] = findParametersForTTLRemoval(ntrl,tw,dataSamples,TTLix,selIx7E,selIx0E,Fs);                        
        [dataSamples] = cleanARTIFACTfromLFP(dataSamples,TTLix(selIx7E),[32*0.5 32*tw(ix(2))],ntrl(ix(1)),2,Fs);
        [dataSamples] = cleanARTIFACTfromLFP(dataSamples,TTLix(selIx0E),[32*0.5 32*2*tw(ix(4))],ntrl(ix(3)),2,Fs);
        
        [ix] = findParametersForTTLRemoval(ntrl,tw,dataSamples,TTLix,selIx7R,selIx0R,Fs);                        
        [dataSamples] = cleanARTIFACTfromLFP(dataSamples,TTLix(selIx7R),[32*0.5 32*tw(ix(2))],ntrl(ix(1)),2,Fs);
        [dataSamples] = cleanARTIFACTfromLFP(dataSamples,TTLix(selIx0R),[32*0.5 32*2*tw(ix(4))],ntrl(ix(3)),2,Fs);
        
        [ix] = findParametersForTTLRemoval(ntrl,tw,dataSamples,TTLix,selIx255,selIx0II,Fs);  
        [dataSamples] = cleanARTIFACTfromLFP(dataSamples,TTLix(selIx255),[32*0.5 32*tw(ix(2))],ntrl(ix(1)),2,Fs);
        [dataSamples] = cleanARTIFACTfromLFP(dataSamples,TTLix(selIx0II),[32*0.5 32*tw(ix(4))],ntrl(ix(3)),2,Fs);
        
        % use interpolation method in case cleaning unsucessful
        %[dataSamples] = interpLFP(dataSamples,TTLix(selIx7),[0.002 0.006],Fs,'linear');
        %[dataSamples] = interpLFP(dataSamples,TTLix(selIx0),[0.002 0.006],Fs,'linear');
        
        %%
        LFPsig{it} = dataSamples';
        
        %% spike detection (1st pass)
        par2 = par;
        par2.fnamespc = [par2.fnamespc,num2str(it)];
        par2.fname_in = [par2.fname_in,num2str(it)];
        par2.segments = 6;%floor(length(dataSamples)/(5*Fs));
        par2.interpolation = 'y';
        
        nsmp = floor(length(dataSamples)/(par2.segments));%Fs;
        ix = 1:nsmp;
        spikeTimestamps = [];
        for kt = 1:par2.segments
            
            [~,~, ~, spikeTimestampsTmp,~,~,~] = amp_detect(dataSamples(ix),par2);
            
            spikeTimestamps = [spikeTimestamps ix(spikeTimestampsTmp)];
            
            if kt < par2.segments-1
                ix = ix+nsmp;
            else
                ix = ix(end)+1:length(dataSamples);
            end;
        end;
                
        %% interpolate LFP around spike times
        if ~isempty( spikeTimestamps )
            %use linear interpolation to remove spike shape from LFP
            %[dataSamples] = interpLFP(dataSamples,spikeTimestamps,[0.002 0.006],Fs,'linear');
            
            % use template subtration to remove spike shape from LFP
            [dataSamples] = cleanARTIFACTfromLFP(dataSamples,spikeTimestamps,[32*0.5 32*2.5],3,2,Fs);
        end;
        
        %%
        LFPsig2{it} = dataSamples;        
        fprintf('\n');
        
    end;
        
    %% compute average LFP across BF electrodes
    chck = regexp(chanLab,'\d{1,8}');
    chck  = [chck{:}];
    
    BF = cell(1,length(chanLab));
    parfor it = 1:length(chanLab)
        BF(it) = {chanLab{it}(1:chck(it)-1)};
    end;
    BFid = unique(BF);        
    
    %%
    bpf2 = bpfFilt;
    logTxt = cell(1,length( CSCfiles));
    LFPsig3 = cell(1,length( CSCfiles));
    for it = 1:length( CSCfiles )
        %for it = 1:length( CSCfiles )
        
        fprintf([num2str(it),'/',num2str(length( CSCfiles) )]);
        
        %% find the best reference signal to bring down noise in the spike band
        sel = find(strcmp(BF,BFid(strcmp(BF(it),BFid))));
        sel = setdiff(sel,it);
        
        refKurt = kurtosis(filtfilt(bpf2,1,LFPsig{it}));
        
        d=zeros(1,length(sel));
        for kt = 1:length(sel)
            d(kt) = kurtosis(filtfilt(bpf2,1,LFPsig{it}-LFPsig2{sel(kt)}));
        end;
        
        if any(d>refKurt)
            [LFPsig3{it}] = LFPsig{it} -LFPsig2{sel(min(find(d>refKurt)))};
            logTxt(it) = {['re-referencing channel ',chanLab{it},' to channel ',chanLab{sel(min(find(d>refKurt)))}]};
        else
            logTxt(it) = {['']};
            [LFPsig3{it}] = LFPsig{it};
         end;
        fprintf('\n');
    end;
    LFPsig2 = LFPsig3; 
    clear LFPsig3 d refKurt sel;
    
    %%
    fid = fopen([savepath,pID,'_',expMode,'_',sesh{seshSel},'_SpkrefList.txt'],'w');
    for it = 1:length(logTxt)
        if ~isempty(logTxt{it})
            fprintf(fid,'%s\n',logTxt{it});
        else
            fprintf(fid,'%s\n','');
        end;
    end;
    clear fid logTxt;
    
    %%
    parfor it = 1:length( CSCfiles )
    %for it = 17    
        fprintf([num2str(it),'/',num2str(length( CSCfiles) )]);
        [dataSamples] = LFPsig2{it};
        
        %% spike detection (2nd pass)
        par2 = par;
        par2.fnamespc = [par2.fnamespc,num2str(it)];
        par2.fname_in = [par2.fname_in,num2str(it)];
        par2.segments = 6;%floor(length(dataSamples)/(5*Fs));
        par2.interpolation = 'n';
        
        nsmp = floor(length(dataSamples)/(par2.segments));%Fs;
        ix = 1:nsmp;
        noiseTraces = [];
        spikeWaveforms = [];
        spikeTimestamps = [];
        noiseSDTmp = [];
        
        for kt = 1:par2.segments
            
            [~,spikeWaveformsTmp, ~, spikeTimestampsTmp,~,~,noiseTracesTmp] = amp_detect(dataSamples(ix),par2);
            
            spikeWaveforms  = [spikeWaveforms;spikeWaveformsTmp];
            spikeTimestamps = [spikeTimestamps ix(spikeTimestampsTmp)];
            noiseSDTmp      = [noiseSDTmp mean(std(noiseTracesTmp,0,2),1)];
            
            if size(noiseTracesTmp,1)>1
                noiseTracesTmp2=[];
                noiseTracesTmp2(1:size(noiseTracesTmp,1) ,1) = ones( size(noiseTracesTmp,1), 1 )*1i;
                noiseTracesTmp2(1:size(noiseTracesTmp,1),2:size(noiseTracesTmp,2)+1)=noiseTracesTmp;
                noiseTraces = [noiseTraces; noiseTracesTmp2];
                noiseTracesTmp2 = [];
                noiseTracesTmp = [];
            end;
            if kt < par2.segments-1
                ix = ix+nsmp;
            else
                ix = ix(end)+1:length(dataSamples);
            end;
        end;
        
        %% sanity check
        % there should now be no more TTL pulses in the timestamp data
        if any(ismember(TTLix,spikeTimestamps))
            delIx = find( ismember(spikeTimestamps,TTLix) );
            spikeWaveforms(delIx,:) = [];
            spikeTimestamps(delIx) = [];% if there are any left throw them away
            if any(ismember(TTLix,spikeTimestamps))
                error('Spiketimes may be contaminated by TTL pulses');
            end;
        end;
        
        %% decorrelate and upsample spike-waveforms
        if ( ~isempty(spikeWaveforms) ) && ( size(spikeWaveforms,1)>1 ) && ( size(spikeWaveforms,2) >1 )
            
            [trans] = posthocWhiten(noiseTraces, spikeWaveforms,[]);
            [trans] = [trans(:,1)*ones(1,2) trans trans(:,end)*ones(1,2)];
            
            par2.interpolation = 'y';
            [trans] = int_spikes(trans,par);
            
            [spikeWaveforms] = [spikeWaveforms(:,1)*ones(1,2) spikeWaveforms spikeWaveforms(:,end)*ones(1,2)];
            [spikeWaveforms] = int_spikes(spikeWaveforms,par);
            
        end;
        
        %%
        waveclus                            = [];
        waveclus.spikes                     = spikeWaveforms;
        waveclus.index                      = spikeTimestamps;
        
        [dim] = size(spikeWaveforms);
        
        %% do spike sorting
        par2.filename = [CSCfiles(it).name];
        
        dum                     = [];
        dum.newSpikeTimes       = [];
        dum.assignedCluster     = [];
        dum.wavf                = [];
        dum.num_clus            = [];
        
        dum2                    = [];
        
        %%
        if dim(1) > dim(2)% the number of spike events must larger than the number of samples in the waveform
            [dum,dum2] = doSpikeSorting_waveclus( waveclus , par2 );
            
            dum.wavf_decorr         = trans;%spikeWaveforms2;%trans;%
            dum.SD                  = mean(noiseSDTmp(noiseSDTmp>0));
            trans = [];
            
            %% force cluster-membership
            [selIx1] = find(dum.assignedCluster ==0);
            [selIx2] = find(dum.assignedCluster ~=0);
            
            [class_out] = force_membership_wc(dum2(selIx2,:), dum.assignedCluster(selIx2), dum2(selIx1,:), par);
            
            dum.assignedCluster(selIx1(class_out~=0)) = class_out(class_out~=0);
            
            %% delete noise clusters
            [delIx] = find(dum.assignedCluster==0);
            
            dum.assignedCluster( delIx ) = [];
            dum.newSpikeTimes( delIx ) = [];
            dum.wavf(delIx,:) = [];
            dum.wavf_decorr(delIx,:) = [];
            dum2(delIx,:) = [];
        end;
        
        %% save the clustered data
        sortedSpikes{it} = dum;
        wltCoeffs{it} = dum2;
        fprintf('\n');
        
    end;
    clear LFPsig2;
    
    %%
    parfor it = 1:length( CSCfiles)
    %for it = 17
        fprintf([num2str(it),'/',num2str(length( CSCfiles) ),'\n']);
        
        %%
        [ dataSamples ] = LFPsig{it};
        
        %% interpolate LFP around spike times
        if ~isempty( sortedSpikes{it}.assignedCluster )
            %use linear interpolation to remove spike shape from LFP
            %[dataSamples] = interpLFP(dataSamples,spikeTimestamps,[0.002 0.006],Fs,'linear');
            
            % use template subtration to remove spike shape from LFP
            cID = unique(sortedSpikes{it}.assignedCluster);
            for kt = 1:length(cID)
                [dataSamples] = cleanARTIFACTfromLFP(dataSamples,sortedSpikes{it}.newSpikeTimes(sortedSpikes{it}.assignedCluster==cID(kt)),[32*0.5 32*2.5],3,2,Fs);
            end;
        end;
        
        %% clean LFP of line noise
        s = 15;
        [step] = round(length(dataSamples)/(s*Fs));
        
        [dataSamples] = cleanLFPfromLineNoise(dataSamples,Fs,step,s);
        
        %% notch filter LFP
        %         [b,a] = butter(4,[49 51]./(Fs/2),'stop');% apply band-stop for LFP
        %         [dataSamples] = filtfilt(b,a,dataSamples);
        
        %% lowpass filter LFP
        bpFreq = [300];
        [b] = fir1(3*floor(Fs/bpFreq(1)),bpFreq./(Fs/2),'low');% apply band-pass for LFP
        [dataSamples] = filtfilt(b,1,dataSamples);
        
        %% save LFP data
        LFPsig{it} = dataSamples; dataSamples = [];                
        
    end;
    
    %%
    toc;
    fprintf('Finished raw data import & preprocessing, moving on\n');
    
    %% time vector for LFP
    [lfpTime] = [1:size(LFPsig{1},2)]./Fs;    
    
    %%    extract reaction times from logfile
    [RTs]    = str2double(logDat.LogDat1.log(:,end));
    
    %% indexes of trials that were later remebered and forgotten
    [hitIdx] =logDat.ix{4};%HITS
    [missIdx] = [logDat.ix{5};logDat.ix{6}];%MISSES
    
    %% delete trials with RTs < 4 sec ( add 1 sec of fixed Encoding length )
    delIx = find(RTs <=4);
    
    selIx7E(delIx) = [];
    selIx7R(delIx) = [];
    
    eventsE(delIx,:) = [];
    eventsR(delIx,:) = [];
    
    trlENC(delIx) = [];
    trlRET(delIx) = [];
    RTs(delIx) = [];
    
    hitIdx(find(ismember(hitIdx,delIx))) = [];
    missIdx(find(ismember(missIdx,delIx))) = [];
    
    %%
    [pre] = 7;% pres stimulus range in s
    [post] = 7;% post-stimulus range in s
    [trlTime] = -pre:1/Fs:post;
    
    [trlSel] = [trlENC trlRET]';
    [ttlIX] = [TTLix(selIx7E) TTLix(selIx7R)]';
    [events] = [eventsE; eventsR];
    
    %% compute the trl matrix based on event time stamps
    %[trl] = computeTRLmatrix(pre,post,eventsE{jt},lfpTime);% sanity
    %check
    
    %% compute the trl matrix based on sample indexes
    [trl] = zeros(length(ttlIX),2);
    for it = 1:length(ttlIX)
        [trl(it,:)] = [ttlIX(it)-pre*Fs ttlIX(it)+post*Fs];
    end;
    
    if any(diff(trl,[],2)./Fs ~= abs(pre)+post)
        error('sample indices are out of range');
    end;
    
    %% segment the LFP data
    [nsmp]    = length(trl(1,1):trl(1,2));
    if length(trlTime) ~= nsmp
        error('inconsistent number of samples');
    end;
    
    [LFPseg] = segmentLFPdata(LFPsig,trl,nsmp);
    
    %% segment the spike data
    [sortedSpikes] = segmentSpikeData(sortedSpikes,pre,post,events,lfpTime);
    
    %%
    savename = [pID,'_',expMode,'_',sesh{seshSel},'_spkDataStimLockedSegmented.mat'];
    save([savepath,sesh{seshSel},'/',savename],'sortedSpikes','wltCoeffs','Fs','chanLab','RTs','trlSel','trlENC','trlRET','hitIdx','missIdx','-v7.3');
    clear sortedSpikes wltCoeffs;
    
    %% use fieldtrip to downsample LFP data
    [LFPseg,dsFs] = downsampleLFP(LFPseg,trlTime,1e3);
    [dsTrlTime] = -pre:1/dsFs:post;
    if (size(LFPseg{1},1) ~= length(dsTrlTime)) || (size(LFPseg{1},2)~=length(trlSel))
        error('trial and sample numbers out of range');
    end;
    
    %%
    savename = [pID,'_',expMode,'_',sesh{seshSel},'_lfpDataStimLockedSegmenteddownsampled.mat'];
    save([savepath,sesh{seshSel},'/',savename],'LFPseg','dsTrlTime','dsFs','chanLab','RTs','trlSel','trlENC','trlRET','hitIdx','missIdx','-v7.3');
    
    %% compute average LFP across BF electrodes
    [LFPavg] = cell( 1 , length(BFid) );
    parfor it = 1:length(BFid)
        LFPavg{it} = zeros(size(LFPseg{1}));
        
        ix = find(strcmp(BF,BFid(it)));
        for jt = 1:length(ix)
            LFPavg{it} = LFPavg{it} + LFPseg{ix(jt)};
        end;
        LFPavg{it} = LFPavg{it}./length(ix);
    end;
    clear LFPseg;
    chanLabAVG = BFid;
    
    %%
    savename = [pID,'_',expMode,'_',sesh{seshSel},'_lfpDataStimLockedSegmentedAVGdownsampled.mat'];
    save([savepath,sesh{seshSel},'/',savename],'LFPavg','dsTrlTime','dsFs','chanLabAVG','RTs','trlSel','trlENC','trlRET','hitIdx','missIdx','-v7.3');
    clear LFPavg dsTrlTime dsFs chanLabAVG RTs trlSel trlENC trlRET hitIdx missIdx;
    
    %% use fieldtrip to downsample LFP data
    for it = 1:length(LFPsig)
        if size(LFPsig{it},2)>size(LFPsig{it},1)
            LFPsig{it} = LFPsig{it}';
        end;
    end;
    
    [LFPsig,dsFs] = downsampleLFP(LFPsig,lfpTime,1e3);
    [dsLfpTime] = [0:size(LFPsig{1},1)-1]./dsFs;
    
    %%
    savename = [pID,'_',expMode,'_',sesh{seshSel},'_lfpDataStimLockedContinuousDownsampled.mat'];
    save([savepath,sesh{seshSel},'/',savename],'LFPsig','dsLfpTime','dsFs','chanLab','-v7.3');
    clear LFPsig dsLfpTime dsFs chanLab;
    
end;
%% shut down parpool
delete(gcp);
exit;